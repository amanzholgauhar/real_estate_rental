from rest_framework import generics, filters, status
from rest_framework.permissions import IsAuthenticated
from rest_framework.views import APIView
from rest_framework.response import Response
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect
from django.core.mail import send_mail
from django.conf import settings
from django.core.exceptions import PermissionDenied
import logging

from .models import Property, Booking
from .serializers import PropertySerializer
from .forms import PropertyForm, BookingForm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# üîπ API-–ø—Ä–æ–≤–µ—Ä–∫–∞
class TestView(APIView):
    def get(self, request):
        return JsonResponse({"message": "It works!"})

# üîπ –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π + —Å–æ–∑–¥–∞–Ω–∏–µ
class PropertyListCreateAPIView(generics.ListCreateAPIView):
    queryset = Property.objects.select_related('user').prefetch_related('booking_set').all()  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ prefetch_related
    serializer_class = PropertySerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['title', 'description', 'location']
    ordering_fields = ['price', 'location']

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

# üîπ CRUD –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
class PropertyRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Property.objects.all()
    serializer_class = PropertySerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # –î–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return Property.objects.filter(user=self.request.user)

    def perform_update(self, serializer):
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if serializer.instance.user != self.request.user:
            raise PermissionDenied("You do not have permission to edit this property.")
        serializer.save()

    def perform_destroy(self, instance):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if instance.user != self.request.user:
            raise PermissionDenied("You do not have permission to delete this property.")
        instance.delete()

# üîπ HTML: –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
@login_required
def add_property_view(request):
    if request.method == 'POST':
        form = PropertyForm(request.POST, request.FILES)
        if form.is_valid():
            property_obj = form.save(commit=False)
            property_obj.user = request.user  
            property_obj.save()
            return redirect('property_list')  # –ø–æ–º–µ–Ω—è–π –Ω–∞ –Ω—É–∂–Ω—ã–π URL
    else:
        form = PropertyForm()

    return render(request, 'listings/add_property.html', {'form': form})


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
@login_required
def create_booking(request):
    if request.method == 'POST':
        form = BookingForm(request.POST)
        if form.is_valid():
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å—Ä–∞–∑—É
                booking = form.save(commit=False)
                booking.user = request.user
                booking.save()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π email
                if not booking.property:
                    logger.error(f"Property not found for booking: {booking.id}")
                    return Response({"error": "Property not found."}, status=status.HTTP_404_NOT_FOUND)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ email –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                send_mail(
                    subject="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ",
                    message=f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è '{booking.property}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.",
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[request.user.email],
                )

                # –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                return redirect('profile_view')

            except Exception as e:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
                logger.error(f"Error creating booking: {str(e)}")  # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
                return Response({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    else:
        form = BookingForm()

    return render(request, 'listings/create_booking.html', {'form': form})

from django.shortcuts import render
from .models import Property
from django.db.models import Q

def property_list_view(request):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    properties = Property.objects.all()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ GET-–∑–∞–ø—Ä–æ—Å–µ)
    search_query = request.GET.get('search', '')
    location_query = request.GET.get('location', '')
    price_query = request.GET.get('price', '')

    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
    if search_query:
        properties = properties.filter(
            Q(title__icontains=search_query) |
            Q(description__icontains=search_query) |
            Q(location__icontains=search_query)
        )

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
    if location_query:
        properties = properties.filter(location__icontains=location_query)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
    if price_query:
        try:
            price = float(price_query)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ
            properties = properties.filter(price__lte=price)
        except ValueError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞

    return render(request, 'listings/property_list.html', {'properties': properties})
from rest_framework_simplejwt.tokens import RefreshToken
from django.shortcuts import render, redirect
from django.contrib.auth import get_user_model, logout
from django.http import JsonResponse
from django.conf import settings
from rest_framework import generics, status
from rest_framework.permissions import IsAuthenticated
from django.core.mail import send_mail
import logging

from .models import Property, Booking
from .forms import PropertyForm, BookingForm
from .serializers import PropertySerializer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# üîπ API-–ø—Ä–æ–≤–µ—Ä–∫–∞
class TestView(APIView):
    def get(self, request):
        return JsonResponse({"message": "It works!"})

# üîπ –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π + —Å–æ–∑–¥–∞–Ω–∏–µ
class PropertyListCreateAPIView(generics.ListCreateAPIView):
    queryset = Property.objects.select_related('user').prefetch_related('booking_set').all()
    serializer_class = PropertySerializer
    permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

# üîπ CRUD –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
class PropertyRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Property.objects.all()
    serializer_class = PropertySerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Property.objects.filter(user=self.request.user)

    def perform_update(self, serializer):
        if serializer.instance.user != self.request.user:
            raise PermissionDenied("You do not have permission to edit this property.")
        serializer.save()

    def perform_destroy(self, instance):
        if instance.user != self.request.user:
            raise PermissionDenied("You do not have permission to delete this property.")
        instance.delete()

# üîπ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
@login_required
def add_property_view(request):
    if request.method == 'POST':
        form = PropertyForm(request.POST, request.FILES)
        if form.is_valid():
            property_obj = form.save(commit=False)
            property_obj.user = request.user  
            property_obj.save()
            return redirect('property_list')
    else:
        form = PropertyForm()

    return render(request, 'listings/add_property.html', {'form': form})

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@login_required
def create_booking(request):
    if request.method == 'POST':
        form = BookingForm(request.POST)
        if form.is_valid():
            try:
                booking = form.save(commit=False)
                booking.user = request.user
                booking.save()

                if not booking.property:
                    logger.error(f"Property not found for booking: {booking.id}")
                    return JsonResponse({"error": "Property not found."}, status=status.HTTP_404_NOT_FOUND)

                send_mail(
                    subject="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                    message=f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è '{booking.property}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.",
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[request.user.email],
                )

                return redirect('profile_view')
            except Exception as e:
                logger.error(f"Error creating booking: {str(e)}")
                return JsonResponse({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    else:
        form = BookingForm()

    return render(request, 'listings/create_booking.html', {'form': form})

# üîπ –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
def property_list_view(request):
    properties = Property.objects.all()

    search_query = request.GET.get('search', '')
    location_query = request.GET.get('location', '')
    price_query = request.GET.get('price', '')

    if search_query:
        properties = properties.filter(
            Q(title__icontains=search_query) |
            Q(description__icontains=search_query) |
            Q(location__icontains=search_query)
        )

    if location_query:
        properties = properties.filter(location__icontains=location_query)

    if price_query:
        try:
            price = float(price_query)
            properties = properties.filter(price__lte=price)
        except ValueError:
            pass

    return render(request, 'listings/property_list.html', {'properties': properties})

# üîπ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (Logout)
def logout_view(request):
    logout(request)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return redirect('login')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
